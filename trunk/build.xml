<?xml version="1.0"?> 
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "project.dtd">

<!--
This is an ant build file compatible with ant version 1.3.

Useful targets:
    + jars jar  the default target to make jar files for development
    + docs      builds all docs into ${dist.dir}
    + dist      creates a crimson-[version].zip file
    + clean     deletes all generated files

All generated files are created under ${build.dir}

As of (2001-08-13), the build requires a sibling xml-commons module to be a
peer of this module.
-->

<project name="crimson" default="jars" basedir=".">

  <!-- Use this property to set version of crimson -->
  <property name="jaxp.spec.version" value="1.1" />
  <property name="impl.version" value="1.1.2beta2" />

  <!-- The name of a sibling xml-commons tree which is used to build a
        crimson distribution -->
  <property name="xml-commons.name" value="xml-commons"/>

  <!-- Build options -->
  <property name="optimize" value="false" />
  <property name="debug" value="on" />

  <!-- The name "build" refers to a directory without a version number,
       while the name "dist" refers to a directory with a version number
       that can be zipped or tarred.  Unzipping such a zip file will create
       a directory neatly containing everything in a distribution.

       General policy: Property names use "." as separators as typical Java
       properties do.  Attribute names use "-" as separators.
  -->

  <property name="build.dir" value="build" />
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.api.src" value="${build.dir}/src"/>

  <property name="dist.file" value="crimson-${impl.version}" />
  <property name="dist.dir" value="${build.dir}/${dist.file}"/>
  <property name="distbin.dir" value="${dist.dir}"/>
  <property name="distsrc.dir" value="${dist.dir}"/>

  <!-- Points to tree containing common XML APIs shared between various
       Apache XML projects.  The base directory refers to the sub directory
       that contains the build.xml file that once was used to build the
       common api jar file. -->
  <property name="xml-commons.basedir"
    value="../${xml-commons.name}/java/external"/>

  <!-- Patternset to specify which java files belong to the API -->
  <patternset id="api-patternset">
    <include name="org/w3c/dom/*"/>   <!-- only include DOM core -->
    <include name="org/xml/sax/**"/>
    <include name="javax/xml/parsers/**"/>
    <!-- Omit TraX
      <include name="javax/xml/transform/**"/>
    -->
  </patternset>

  <property name="api.jar.name" value="jaxp.jar"/>

  <target name="init">
    <antstructure output="project.dtd"/>

    <available file="${xml-commons.basedir}/build.xml"
      property="xml-commons.present"/>
    <echo message="xml-commons.present is ${xml-commons.present}"/>

    <tstamp>
      <format pattern="yyyy-MM-dd" property="TODAY-ISO"/>
    </tstamp>
    <filter token="today-iso" value="${TODAY-ISO}"/>
    <filter token="version" value="${impl.version}"/>
  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <!-- ==================== Build  ==================== -->

<!--
  <target name="api.basedir" unless="api.basedir.present" depends="init">
    <fail message="The xml-commons module must be a sibling of this one."/>
  </target>
-->

  <target name="copy-api-src-from-xml-commons" if="xml-commons.present"
    depends="init">
    <echo>Copying API src from ${xml-commons.basedir}</echo>
    <copy todir="${build.api.src}" includeemptydirs="no">
      <fileset dir="${xml-commons.basedir}/src">
        <patternset refid="api-patternset"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-api-src-from-local" unless="xml-commons.present"
    depends="init">
    <echo>Copying API src from local tree</echo>
    <copy todir="${build.api.src}" includeemptydirs="no">
      <fileset dir="src">
        <patternset refid="api-patternset"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-api-src"
    depends="copy-api-src-from-xml-commons,copy-api-src-from-local"/>

  <target name="compile-api" depends="prepare,copy-api-src">
    <javac destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="off">
      <classpath>
        <pathelement location="${build.classes}"/>
      </classpath>
      <src location="${build.api.src}"/>
      <patternset refid="api-patternset"/>
    </javac>
  </target>

  <!-- XXX Here I am -->
  <!-- Compile parser implementation classes -->
  <target name="compile-impl" depends="prepare">
    <javac srcdir="src" 
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="off" >
      <classpath>
        <pathelement location="${build.classes}" />
        <pathelement location="${build.dir}/${api.jar.name}" />
        <pathelement location="src" />
      </classpath>
      <exclude name="**/,**" />
      <exclude name="**/SCCS/**" />
      <include name="org/apache/**" />
    </javac>
    <copy todir="${build.classes}/org/apache">
      <fileset dir="src/org/apache" >
        <include name="**/**.properties" />
        <exclude name="**/,**" />
        <exclude name="**/SCCS/**" />
      </fileset>
    </copy>
  </target>

  <!-- This target was used to create a separate JAXP API jar which
        contained only the javax.xml.parsers and javax.xml.transform.*
        packages. -->
  <target name="api-jar" depends="compile-api">
    <jar jarfile="${build.dir}/${api.jar.name}"
         basedir="${build.classes}"
         manifest="src/META-INF/jaxp-javax.manifest" >
      <include name="javax/xml/**"/>
    </jar>
  </target>

  <target name="crimson.jar" depends="compile-api,compile-impl">
    <mkdir dir="${build.classes}/META-INF/services" />
    <copy todir="${build.classes}/META-INF/services">
      <fileset dir="src/META-INF/services">
        <include name="javax.xml.parsers.SAXParserFactory" />
        <include name="javax.xml.parsers.DocumentBuilderFactory" />
      </fileset>
    </copy>
    <jar jarfile="${build.dir}/crimson.jar"
         basedir="${build.classes}"
         manifest="src/META-INF/manifest.crimson" >
      <include name="META-INF/services/**" />
      <include name="org/apache/crimson/**" />
      <include name="org/w3c/dom/*"/>
      <include name="org/xml/sax/**"/>
    </jar>
  </target>

<!-- XXX fix dependencies! -->
  <target name="jars" depends="">
  </target>
<!--
  <target name="jars" depends="api.jar,crimson.jar">
  </target>
-->

  <target name="jar" depends="jars">
  </target>

<!-- XXX fix dependencies! -->
  <target name="javadoc" depends="">
    <mkdir dir="${build.dir}/docs/api"/>
    <javadoc packagenames="org.w3c.dom,org.xml.*,javax.xml.*"
             destdir="${build.dir}/docs/api"
             author="true"
             version="true"
             use="true"
             windowtitle="Java API for XML Processing Specification ${jaxp.spec.version}"
             doctitle="Java API for XML Processing Specification ${jaxp.spec.version}">
      <sourcepath refid="src.path"/>
    </javadoc>
  </target>

  <target name="examples" depends="init">
    <mkdir dir="${build.dir}/examples"/>
    <copy todir="${build.dir}/examples">
      <fileset dir="examples"/>
    </copy>
  </target>

  <target name="non-javadoc" depends="init">
    <mkdir dir="${build.dir}/docs"/>
    <copy todir="${build.dir}/docs">
      <fileset dir="docs">
        <exclude name="README.html"/>
        <exclude name="README.txt"/>
      </fileset>
    </copy>
    <copy todir="${build.dir}" file="docs/README.html" filtering="true"/>
    <copy file="ChangeLog" todir="${build.dir}"/>
  </target>

  <target name="docs" depends="non-javadoc,examples,javadoc">
  </target>

<!-- XXX fix dependencies! -->
  <target name="dist" depends="jars,docs," >
    <!-- Copy the built jar files -->
    <copy file="${build.dir}/crimson.jar" todir="${dist.dir}" />
    <copy file="${build.dir}/${api.jar.name}" todir="${dist.dir}" />

    <!-- Copy sources -->
    <copy todir="${dist.dir}/src">
      <!-- Parser implementation src files -->
      <fileset dir="src"/>

      <!-- XML API src files -->
      <fileset dir="${api.basedir}/src">
        <include name="org/w3c/dom/*"/>   <!-- only include DOM core -->
        <include name="org/xml/sax/**"/>
        <include name="javax/xml/**"/>
      </fileset>
    </copy>

    <zip zipfile="${build.dir}/${dist.file}.zip"
         basedir="${build.dir}"
         includes="${dist.file}/**" />
  </target>

<!-- XXX fix dependencies! -->
  <target name="pack-src" depends="init," >
    <echo message="Building the source distribution"/>
    <delete dir="${distsrc.dir}"/>

    <mkdir dir="${distsrc.dir}"/>
    <mkdir dir="${distsrc.dir}/src"/>

    <!-- Copy sources -->
    <copy todir="${distsrc.dir}/src" includeemptydirs="no">
      <!-- Parser implementation src files -->
      <fileset dir="src"/>

      <!-- XML API src files -->
      <fileset dir="${api.basedir}/src">
        <include name="org/w3c/dom/*"/>   <!-- only include DOM core -->
        <include name="org/xml/sax/**"/>
        <include name="javax/xml/**"/>
      </fileset>
    </copy>

    <copy todir="${distsrc.dir}/docs">
      <fileset dir="docs"/>
    </copy>

    <copy todir="${distsrc.dir}/examples">
      <fileset dir="examples"/>
    </copy>

    <copy file="README.txt" todir="${distsrc.dir}"/>
    <copy file="build.xml" todir="${distsrc.dir}"/>
    <copy file="ChangeLog" todir="${distsrc.dir}"/>
    <copy file="project.dtd" todir="${distsrc.dir}"/>

    <zip zipfile="${build.dir}/${dist.file}.zip"
         basedir="${build.dir}"
         includes="${dist.file}/**" />
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>
</project>
